"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from datetime import timedelta
from pathlib import Path
from typing import cast
from decouple import config, Csv
from dj_database_url import parse as parse_conn_str

from shared.settings import file_or_text, random_secret_key

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = cast(
    str, config("SECRET_KEY", cast=file_or_text, default=random_secret_key())
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = cast(bool, config("DEBUG", cast=bool, default=False))

ALLOWED_HOSTS = cast(
    list[str],
    config(
        "ALLOWED_HOSTS",
        cast=Csv(),
        default="127.0.0.1, localhost",
    ),
)


# Application definition

INSTALLED_APPS = [
    # <Django apps>
    # "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    # "django.contrib.sessions",
    # "django.contrib.messages",
    "django.contrib.staticfiles",
    # </Django apps>
    # <Project apps>
    "authentication.apps.AuthenticationConfig",
    "resume.apps.ResumeConfig",
    "shared.apps.SharedConfig",
    # </Project apps>
    # <Third-party apps>
    "rest_framework",
    "drf_spectacular",
    "corsheaders",
    "rest_framework_simplejwt",
    # </Third-party apps>
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.locale.LocaleMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    # "django.contrib.auth.middleware.AuthenticationMiddleware",
    # "django.contrib.messages.middleware.MessageMiddleware",
    # "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "core.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "core.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases
DATABASES = {}

if db_url := cast(str | None, config("DATABASE_URL", default=None)):
    DATABASES["default"] = parse_conn_str(
        db_url,
        conn_max_age=cast(
            int,
            config("DATABASE_CONN_MAX_AGE", cast=int, default=600),
        ),
        conn_health_checks=True,
    )


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation." + cls,
    }
    for cls in [
        "UserAttributeSimilarityValidator",
        "MinimumLengthValidator",
        "CommonPasswordValidator",
        "NumericPasswordValidator",
    ]
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "static"


# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Custom user model
AUTH_USER_MODEL = "authentication.User"

# django-cors-headers settings
# https://pypi.org/project/django-cors-headers/
CORS_ALLOWED_ORIGINS = cast(
    list[str], config("CORS_ALLOWED_ORIGINS", cast=Csv(), default="")
)

# django-rest-framework settings
# https://www.django-rest-framework.org/#installation
REST_FRAMEWORK = {
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    "DEFAULT_PERMISSION_CLASSES": (
        "rest_framework.permissions.DjangoModelPermissions",
    ),
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    "DEFAULT_PAGINATION_CLASS": ("rest_framework.pagination.PageNumberPagination"),
    "PAGE_SIZE": 20,
}

# drf-spectacular settings
# https://drf-spectacular.readthedocs.io/en/latest/
SPECTACULAR_SETTINGS = {
    "TITLE": "Resume's API",
    "VERSION": "0.1.0",
    "SERVE_INCLUDE_SCHEMA": True,
    "COMPONENT_SPLIT_REQUEST": True,
    "DESCRIPTION": "Resume's backend project. Powered by django5.0.",
    "SWAGGER_UI_SETTINGS": {
        "deepLinking": True,
        "persistAuthorization": True,
    },
}

# djangorestframework-simplejwt settings
# https://django-rest-framework-simplejwt.readthedocs.io/en/latest/
SIMPLE_JWT = {
    "SIGNING_KEY": config("SIGNING_KEY", default=SECRET_KEY),
    "ACCESS_TOKEN_LIFETIME": timedelta(
        minutes=config(
            "ACCESS_TOKEN_LIFETIME_MINUTES",
            cast=int,
            default=24 * 60,
        )
    ),
    "REFRESH_TOKEN_LIFETIME": timedelta(
        minutes=config(
            "REFRESH_TOKEN_LIFETIME_MINUTES",
            cast=int,
            default=30 * 24 * 60,
        )
    ),
}


# Logging configuration
# https://docs.djangoproject.com/en/3.2/topics/logging/
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "simple": {"format": "[%(asctime)s] %(levelname)s %(message)s"},
        "verbose": {
            "format": "%(levelname)s %(asctime)s %(module)s "
            "%(process)d %(thread)d %(message)s"
        },
    },
    "handlers": {
        "console": {
            "formatter": "simple",
            "class": "logging.StreamHandler",
        },
        "verbose_console": {
            "formatter": "verbose",
            "class": "logging.StreamHandler",
        },
    },
    "loggers": {
        "": {
            "handlers": ["console"],
            "level": "WARNING",
            "propagate": False,
        },
        "django.request": {
            "handlers": ["console"],
            "level": "DEBUG",
        },
    },
}


# django-bleach settings
# https://django-bleach.readthedocs.io/en/latest/settings.html

BLEACH_ALLOWED_PROTOCOLS = ["http", "https"]
# Strip unknown tags if True, replace with HTML escaped characters if False
BLEACH_STRIP_TAGS = True
# Strip HTML comments, or leave them in.
BLEACH_STRIP_COMMENTS = False

BLEACH_ALLOWED_ATTRIBUTES = ["href", "style", "src"]
BLEACH_ALLOWED_TAGS = [
    "p",
    "b",
    "i",
    "u",
    "em",
    "strong",
    "a",
    "img",
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "span",
    "sup",
    "sub",
    "code",
    "table",
    "tbody",
    "tr",
    "th",
    "td",
]

BLEACH_ALLOWED_STYLES = [
    "font-family",
    "font-weight",
    "font-size",
    "font-variant",
    "text-decoration",
    "color",
    "background-color",
    "direction",
    "text-align",
]

# Configure HTTPS
USE_X_FORWARDED_HOST = True
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
